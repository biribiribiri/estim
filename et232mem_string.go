// Code generated by "enumer -type=ET232Mem"; DO NOT EDIT

package estim

import (
	"fmt"
)

const (
	_ET232Mem_name_0 = "PulseWidthAFreqRecAPulseAmpAPowerCompAPulsePolarityEnA"
	_ET232Mem_name_1 = "PulseWidthBFreqRecBPulseAmpBPowerCompBPulsePolarityEnB"
	_ET232Mem_name_2 = "PotBPotMABatteryVoltageAudioInputPotA"
	_ET232Mem_name_3 = "ModeModeOverrideAnalogOverride"
	_ET232Mem_name_4 = "AutoPowerOffTimer"
	_ET232Mem_name_5 = "ProgramFadeInTimer"
)

var (
	_ET232Mem_index_0 = [...]uint8{0, 11, 19, 28, 38, 54}
	_ET232Mem_index_1 = [...]uint8{0, 11, 19, 28, 38, 54}
	_ET232Mem_index_2 = [...]uint8{0, 4, 9, 23, 33, 37}
	_ET232Mem_index_3 = [...]uint8{0, 4, 16, 30}
	_ET232Mem_index_4 = [...]uint8{0, 17}
	_ET232Mem_index_5 = [...]uint8{0, 18}
)

func (i ET232Mem) String() string {
	switch {
	case 8 <= i && i <= 12:
		i -= 8
		return _ET232Mem_name_0[_ET232Mem_index_0[i]:_ET232Mem_index_0[i+1]]
	case 14 <= i && i <= 18:
		i -= 14
		return _ET232Mem_name_1[_ET232Mem_index_1[i]:_ET232Mem_index_1[i+1]]
	case 136 <= i && i <= 140:
		i -= 136
		return _ET232Mem_name_2[_ET232Mem_index_2[i]:_ET232Mem_index_2[i+1]]
	case 162 <= i && i <= 164:
		i -= 162
		return _ET232Mem_name_3[_ET232Mem_index_3[i]:_ET232Mem_index_3[i+1]]
	case i == 211:
		return _ET232Mem_name_4
	case i == 216:
		return _ET232Mem_name_5
	default:
		return fmt.Sprintf("ET232Mem(%d)", i)
	}
}

var _ET232MemNameToValue_map = map[string]ET232Mem{
	_ET232Mem_name_0[0:11]:  8,
	_ET232Mem_name_0[11:19]: 9,
	_ET232Mem_name_0[19:28]: 10,
	_ET232Mem_name_0[28:38]: 11,
	_ET232Mem_name_0[38:54]: 12,
	_ET232Mem_name_1[0:11]:  14,
	_ET232Mem_name_1[11:19]: 15,
	_ET232Mem_name_1[19:28]: 16,
	_ET232Mem_name_1[28:38]: 17,
	_ET232Mem_name_1[38:54]: 18,
	_ET232Mem_name_2[0:4]:   136,
	_ET232Mem_name_2[4:9]:   137,
	_ET232Mem_name_2[9:23]:  138,
	_ET232Mem_name_2[23:33]: 139,
	_ET232Mem_name_2[33:37]: 140,
	_ET232Mem_name_3[0:4]:   162,
	_ET232Mem_name_3[4:16]:  163,
	_ET232Mem_name_3[16:30]: 164,
	_ET232Mem_name_4[0:17]:  211,
	_ET232Mem_name_5[0:18]:  216,
}

func ET232MemString(s string) (ET232Mem, error) {
	if val, ok := _ET232MemNameToValue_map[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ET232Mem values", s)
}
